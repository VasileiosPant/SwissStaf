/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import Basics.City;
import Basics.ControlCenter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.net.UnknownHostException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author tasosnikolakop
 */
public class IntroFrame extends javax.swing.JFrame {

    /**
     * Creates new form MyJframe
     */
    public IntroFrame() {
        initComponents();
        /* ButtonListener bl = new ButtonListener();
         Yes.addActionListener(bl); */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Yes = new javax.swing.JButton();
        Intro1 = new javax.swing.JLabel();
        Intro2 = new javax.swing.JLabel();
        Intro3 = new javax.swing.JLabel();
        No = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        AnArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Yes.setText("Yes, use the existing file");
        Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YesActionPerformed(evt);
            }
        });

        Intro1.setText("Hello. First of all, we are going to download the cities and write both them and their data into a file.");

        Intro2.setText("There is a file available with with the cities and their data already filled, in case that you are in a hurry.");

        Intro3.setText("Would you like to use the existing file? (Yes/No - *If not, you will create one by downloading*)");

        No.setText("No, create a new file");
        No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoActionPerformed(evt);
            }
        });

        AnArea.setColumns(20);
        AnArea.setRows(5);
        jScrollPane1.setViewportView(AnArea);

        jLabel1.setText("Output Screen:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Intro2, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(Yes, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(No, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Intro1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(Intro3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(130, 130, 130)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(276, 276, 276)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Intro1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Intro2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Intro3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Yes, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(No, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YesActionPerformed
        // TODO add your handling code here:
        System.out.println("Good.");
        BasicFrame trier = new BasicFrame();
        trier.setVisible(true);
        IntroFrame eo = new IntroFrame();
    }//GEN-LAST:event_YesActionPerformed

    private void NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoActionPerformed
                try{                                   
                    // TODO add your handling code here:
                    IntroFrame bo = new IntroFrame();
                    String answer = (String) JOptionPane.showInputDialog(bo, "So, type a name for the new file where the cities and their data will be stored.");
                    String answeryrn = "No";
                    while (answeryrn.equals("No") || answeryrn.equals("NO") || answeryrn.equals("no")) {
                        answeryrn = (String) JOptionPane.showInputDialog(bo, "You have typed the following name: " + "" + answer + "."
                                + " Do you want to keep it for sure (Yes or No for answer)?");
                        while (!(answeryrn.equals("No")) && !(answeryrn.equals("NO")) && !(answeryrn.equals("no"))
                                && !(answeryrn.equals("Yes")) && !(answeryrn.equals("YES")) && !(answeryrn.equals("yes"))) {
                            answeryrn = (String) JOptionPane.showInputDialog(bo, "I did not understand. Type again, yes or no.");
                        }
                        if (answeryrn.equals("No") || answeryrn.equals("NO") || answeryrn.equals("no")) {
                            answer = (String) JOptionPane.showInputDialog(bo, "Type again a name for the file where the cities and their data will be stored.");
                        } else if (answeryrn.equals("Yes") || answeryrn.equals("YES") || answeryrn.equals("yes")) {
                            break;
                        }
                    }
                    
                    ArrayList<City> Cities = new ArrayList<City>();
                    BufferedReader reader;
                    reader = new BufferedReader(new FileReader("citiesonly.txt"));
                    String line;
                    URL GetTheId, helper;
                    helper = new URL("http://www.google.gr");
                    URLConnection connector;
                    connector = helper.openConnection();
                    BufferedReader AllInfo = new BufferedReader(new InputStreamReader(connector.getInputStream()));
                    String inputLine;
                    AnArea.append("\n" + "Please wait a few moments, as download is in progress...");
                    System.out.println("Please wait a few moments, as download is in progress...");
                    try{
                        while ((line = reader.readLine()) != null) {
                            AnArea.append("\n" + line);
                            System.out.print(line);
                            GetTheId = new URL("http://transport.opendata.ch/v1/locations?query=" + URLEncoder.encode(line, "UTF-8"));
                            connector = GetTheId.openConnection();
                            AllInfo = new BufferedReader(new InputStreamReader(connector.getInputStream()));
                            inputLine = AllInfo.readLine();
                            JSONParser parser = new JSONParser();
                            JSONObject obj = (JSONObject) parser.parse(inputLine);
                            Object anotherobject = (Object) obj.get("stations");
                            JSONArray anotherjarray = (JSONArray) anotherobject;
                            JSONObject onemoreobject = (JSONObject) anotherjarray.get(0);
                            Object name = (Object) onemoreobject.get("name");
                            Object id = (Object) onemoreobject.get("id");
                            JSONObject coordinates = (JSONObject) onemoreobject.get("coordinate");
                            Object xe = (Object) coordinates.get("x");
                            String xeaxis = (xe.toString());
                            Object ye = (Object) coordinates.get("y");
                            String yeaxis = (ye.toString());
                            AnArea.append("\n" + " " + id);
                            System.out.println(" " + id);
                            AnArea.append("\n" + "x: " + xeaxis);
                            System.out.println("x: " + xeaxis);
                            AnArea.append("\n" + "y: " + yeaxis);
                            System.out.println("y: " + yeaxis);
                            String cityname = name.toString();
                            String cityid;
                            if (id != null) {
                                cityid = (id.toString());
                                
                            } else {
                                cityid = "No id found for this city";
                            }
                            City randomcity = new City(line, cityid, xeaxis, yeaxis);
                            Cities.add(randomcity);
                        }
                        
                        BufferedWriter ela;
                        File newfile = new File("" + answer + ".txt");
                        ela = new BufferedWriter(new FileWriter(newfile));
                        int i = 0;
                        BufferedReader newfilereader;
                        String line3;
                        newfilereader = new BufferedReader(new FileReader("citiesonly.txt"));
                        while ((line3 = newfilereader.readLine()) != null) {
                            ela.write(Cities.get(i).getName());
                            ela.write("\n");
                            ela.write(Cities.get(i).getId());
                            ela.write("\n");
                            ela.write(Cities.get(i).getXaxis());
                            ela.write("\n");
                            ela.write(Cities.get(i).getYaxis());
                            ela.write("\n");
                            i++;
                        }
                        reader.close();
                        AllInfo.close();
                        ela.close();
                        newfilereader.close();
                    } catch (UnknownHostException ef) {
                        AnArea.append("\n" + "Internet connection error. Please check your internet availability. Exit the programme "
                                + "and use it once your connection is solid again.");
                        System.out.println("Internet connection error. Please check your internet availability. Exit the programme "
                                + "and use it once your connection is solid again.");
                        
                    } catch (IOException ed) {
                        AnArea.append("\n" + "Download of cities and their data could not be complete, due to potential connection problem. "
                                + "Please exit the programme, reopen and try again.");
                        System.out.println("Download of cities and their data could not be complete, due to potential connection problem. "
                                + "Please exit the programme, reopen and try again.");
                    } catch (ParseException ex) {
                        Logger.getLogger(IntroFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    
                    
                    BasicFrame trier = new BasicFrame();
                    trier.setVisible(true);
                    
                    
                } catch (FileNotFoundException ex) {
                Logger.getLogger(IntroFrame.class.getName()).log(Level.SEVERE, null, ex);

            } catch (MalformedURLException ex) {
            Logger.getLogger(IntroFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(IntroFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    

    }//GEN-LAST:event_NoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IntroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IntroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IntroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IntroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IntroFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AnArea;
    private javax.swing.JLabel Intro1;
    private javax.swing.JLabel Intro2;
    private javax.swing.JLabel Intro3;
    private javax.swing.JButton No;
    private javax.swing.JButton Yes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
